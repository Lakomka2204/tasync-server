services:
  pg:
    image: postgres:latest
    container_name: pg
    environment:
      PGDATA: /data/pg
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - pg
    restart: unless-stopped
    volumes:
      - pg:/data/pg
  redis:
    image: redis:latest
    container_name: redis
    networks:
      - redis
    restart: unless-stopped
    volumes:
      - redis:/data
  backend:
    image: node:slim
    container_name: backend
    networks:
      - redis
      - pg
      - backend
    restart: unless-stopped
    build:
      dockerfile: Dockerfile
      context: .
    depends_on:
      - pg
      - redis
    ports:
      - '80:3000'
    environment:
      DB_USER: postgres
      DB_PASS: postgres
      DB_HOST: pg
      DB_PORT: 5432
      DB_SCHEMA: public
      DB_DATABASE: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_ID: tasync
      JWT_SECRET: ${JWT_SECRET}
      AWS_S3_REGION: ${AWS_S3_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      PORT: 3000
      TMP_PATH: /tmp
      NODE_ENV: staging

networks:
  pg:
    name: pg_network
  redis:
    name: redis_network
  backend:
    name: backend_network

volumes:
  pg:
    name: pg_vol
  redis:
    name: redis_vol
